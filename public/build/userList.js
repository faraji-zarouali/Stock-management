(self["webpackChunk"] = self["webpackChunk"] || []).push([["userList"],{

/***/ "./assets/js/user_list.js":
/*!********************************!*\
  !*** ./assets/js/user_list.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/* provided dependency */ var toastr = __webpack_require__(/*! toastr */ "./node_modules/toastr/toastr.js");
__webpack_require__(/*! core-js/modules/es.array.concat.js */ "./node_modules/core-js/modules/es.array.concat.js");
__webpack_require__(/*! core-js/modules/es.array.find.js */ "./node_modules/core-js/modules/es.array.find.js");
__webpack_require__(/*! core-js/modules/es.object.to-string.js */ "./node_modules/core-js/modules/es.object.to-string.js");
__webpack_require__(/*! core-js/modules/es.json.stringify.js */ "./node_modules/core-js/modules/es.json.stringify.js");
__webpack_require__(/*! core-js/modules/es.array.join.js */ "./node_modules/core-js/modules/es.array.join.js");
$(document).ready(function () {
  var table = $('#user-datatable').DataTable({
    processing: true,
    serverSide: true,
    pageLength: 8,
    lengthMenu: [[8, 25, 50, -1], [8, 25, 50, 'All']],
    ajax: {
      url: Routing.generate('app_user_getlist'),
      datasrc: function datasrc(d) {
        d.draw = d.draw || 0;
        d.start = d.start || 0;
        d.length = d.length || 15;
      }
    },
    order: [[0, 'asc']],
    columns: [{
      name: 'u.id',
      data: 'id',
      orderable: true,
      searchable: true
    }, {
      name: 'u.email',
      data: 'email',
      orderable: true,
      searchable: true
    }, {
      name: 'u.roles',
      data: 'roles',
      render: function render(data) {
        return data == 'ROLE_USER' ? 'ROLE_USER' : 'ROLE_ADMIN';
      }
    }, {
      name: 'u.status',
      data: 'status',
      render: function render(data) {
        var iconClass = data ? 'fas fa-user' : 'fas fa-user-slash';
        return '<i class="' + iconClass + '" ></i>';
      }
    }, {
      data: 'id',
      render: function render(data, type, row) {
        var deactivateButton = "<button class=\"btn btn-".concat(row.status ? 'danger' : 'secondary', " action-button\" data-user-id=\"").concat(data, "\">").concat(row.status ? 'Deactivate' : 'Activate', "</button>");
        var editButton = "<button class=\"btn btn-primary edit-button\" data-user-id=\"".concat(data, "\">Update</button>");
        return "".concat(deactivateButton, " ").concat(editButton);
      }
    }],
    dom: 'Bfrtip'
  });
  $('body').on('click', '#add-user-button', function () {
    $('#add-user-modal').modal('show');
  });
  $('#add-user-modal').on('click', '#add-user-btn', function () {
    var newUserEmail = $("#newUserEmail").val();
    var newUserRole = $('#newUserRole').find(":selected").val();
    var newUserPassword = $("#newUserPassword").val();
    var newUserData = {
      email: newUserEmail,
      role: newUserRole,
      password: newUserPassword
    };
    $.ajax({
      url: Routing.generate('app_new_user'),
      type: "POST",
      contentType: 'application/json',
      data: JSON.stringify(newUserData),
      success: function success(response, textStatus, xhr) {
        if (xhr.status === 200) {
          // Get the current page before reload
          var currentPage = table.page();
          // Reload the DataTable with AJAX
          table.ajax.reload(function () {
            // Set the table back to the previously stored page
            table.page(currentPage).draw('page');
          });
          $('#add-user-modal').modal('hide');
          $('#newUserEmail').val("");
          $('#newUserRole').val("ROLE_USER");
          $('#newUserPassword').val("");
          // Show success pop-up
          toastr["success"]("New User Added successfully", "Success");
        } else {
          console.error('Unexpected success status code:', xhr.status);
        }
      },
      error: function error(xhr) {
        // Handle errors
        if (xhr.status === 409) {
          toastr["error"]("Email is already in use");
        } else if (xhr.responseJSON && xhr.responseJSON.errors) {
          // Display validation errors to the user
          toastr["error"](xhr.responseJSON.errors);
        } else {
          // Handle other errors
          toastr["error"]('An error occurred');
        }
      }
    });
  });
  $('body').on('click', '.action-button', function () {
    var userId = $(this).data('user-id');
    $.ajax({
      url: Routing.generate('app_update_user_status', {
        id: userId
      }),
      type: "GET",
      success: function success(response, textStatus, xhr) {
        console.log(response);
        if (xhr.status === 200) {
          // Get the current page before reload
          var currentPage = table.page();
          // Reload the DataTable with AJAX
          table.ajax.reload(function () {
            // Set the table back to the previously stored page
            table.page(currentPage).draw('page');
          });
          // Show success pop-up
          toastr["success"]("Status Update successfully", "Success");
        } else {
          console.error('Unexpected success status code:', xhr.status);
        }
      },
      error: function error(xhr, status, _error) {
        console.error('Status Update failed:', _error);
        if (xhr.status >= 400 && xhr.status < 500) {
          alert('Status Update failed: Client error');
        } else if (xhr.status >= 500) {
          alert('Status Update failed: Server error');
        }
      }
    });
  });
  $('body').on('click', '.edit-button', function () {
    var userId = $(this).data('user-id');
    $.ajax({
      url: Routing.generate('app_get_user', {
        id: userId
      }),
      type: "GET",
      success: function success(dataResult) {
        $('#uId').val(dataResult.user.id);
        $('#email').val(dataResult.user.email);
        $('#role').val(dataResult.user.roles);
        $('#edit-modal').modal('show');
      }
    });
  });
  $('.modal').on('click', '#btnUpdateSubmit', function () {
    var updatedUserId = $("#uId").val();
    var updatedUserEmail = $("#email").val();
    var updatedUserRole = $('#role').find(":selected").val();
    var updatedUserData = {
      id: updatedUserId,
      email: updatedUserEmail,
      role: updatedUserRole
    };
    $.ajax({
      url: Routing.generate('app_update_user'),
      type: "POST",
      contentType: 'application/json',
      data: JSON.stringify(updatedUserData),
      success: function success(response, textStatus, xhr) {
        console.log(response);
        if (xhr.status === 200) {
          // Get the current page before reload
          var currentPage = table.page();
          // Reload the DataTable with AJAX
          table.ajax.reload(function () {
            // Set the table back to the previously stored page
            table.page(currentPage).draw('page');
          });
          $('#edit-modal').modal('hide');

          // Show success pop-up
          toastr["success"]("Update successfully", "Success");
        } else {
          console.error('Unexpected success status code:', xhr.status);
        }
      },
      error: function error(xhr) {
        // Handle errors
        if (xhr.responseJSON && xhr.responseJSON.errors) {
          toastr["error"](xhr.responseJSON.errors);
          // Display validation errors to the user
          toastr["error"]('Validation errors:\n' + xhr.responseJSON.errors.join('\n'));
        } else {
          // Handle other errors
          toastr["error"]('An error occurred');
        }
      }
    });
  });
});

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ __webpack_require__.O(0, ["vendors-node_modules_jquery_dist_jquery_js","vendors-node_modules_toastr_toastr_js-node_modules_core-js_internals_array-species-create_js--4bb413","vendors-node_modules_core-js_modules_es_array_concat_js-node_modules_core-js_modules_es_array-5cd115"], () => (__webpack_exec__("./assets/js/user_list.js")));
/******/ var __webpack_exports__ = __webpack_require__.O();
/******/ }
]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,